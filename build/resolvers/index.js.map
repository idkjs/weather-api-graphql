{"version":3,"sources":["../../src/resolvers/index.js"],"names":["require","baseUrl","urlParams","mapLinkBase","getLocation","apiKey","place","options","provider","geocoder","Promise","resolve","reject","geocode","err","res","city","country","lat","latitude","lng","longitude","coords","mapLink","getWeather","error","response","body","data","JSON","parse","summary","currently","temperature","apttemperature","apparentTemperature","timezone","time","icon","sunrise","daily","sunriseTime","sunset","sunsetTime","moonphase","moonPhase","Query","location","parent","args","context","process","env","GOOGLE","Location","weather","DARKSKY"],"mappings":";;;;;;;AAEA;;AAIA;;AACA;;;;AAPAA,OAAO,CAAC,SAAD,CAAP;;AAQA,IAAMC,OAAO,GAAG,mCAAhB;AACA,IAAMC,SAAS,GAAG,yCAAlB;AACA,IAAMC,WAAW,GAAG,iCAApB,C,CACA;AACA;;AACA,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,KAA7B,EAAoC;AAClC,MAAMC,OAAO,GAAG;AACdC,IAAAA,QAAQ,EAAE,QADI;AAEdH,IAAAA,MAAM,EAANA;AAFc,GAAhB;AAKA,MAAMI,QAAQ,GAAG,2BAAaF,OAAb,CAAjB;AAEA,SAAO,IAAIG,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCH,IAAAA,QAAQ,CAACI,OAAT,CAAiBP,KAAjB,EAAwB,UAACQ,GAAD,EAAMC,GAAN,EAAc;AACpC,UAAID,GAAJ,EAAS;AACPF,QAAAA,MAAM,CAACE,GAAD,CAAN;AACD;;AACD,UAAME,IAAI,GAAGD,GAAG,CAAC,CAAD,CAAH,CAAOC,IAApB;AACA,UAAMC,OAAO,GAAGF,GAAG,CAAC,CAAD,CAAH,CAAOE,OAAvB;AACA,UAAMC,GAAG,GAAGH,GAAG,CAAC,CAAD,CAAH,CAAOI,QAAnB;AACA,UAAMC,GAAG,GAAGL,GAAG,CAAC,CAAD,CAAH,CAAOM,SAAnB;AACAV,MAAAA,OAAO,CAAC;AACNK,QAAAA,IAAI,EAAJA,IADM;AAENC,QAAAA,OAAO,EAAPA,OAFM;AAGNK,QAAAA,MAAM,EAAE,CAACJ,GAAD,EAAME,GAAN,CAHF;AAING,QAAAA,OAAO,YAAKpB,WAAL,SAAmBe,GAAnB,cAA0BE,GAA1B;AAJD,OAAD,CAAP;AAMD,KAdD;AAeD,GAhBM,CAAP;AAiBD,C,CAED;;;AACA,SAASI,UAAT,CAAoBnB,MAApB,EAA4BiB,MAA5B,EAAoC;AAClC,SAAO,IAAIZ,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,oCAAWX,OAAX,SAAqBI,MAArB,cAA+BiB,MAAM,CAAC,CAAD,CAArC,cAA4CA,MAAM,CAAC,CAAD,CAAlD,SAAwDpB,SAAxD,GAAqE,UAACuB,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAA2B;AAC9F,UAAIF,KAAJ,EAAW;AACTb,QAAAA,MAAM,CAACa,KAAD,CAAN;AACD;;AACD,UAAMG,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAb;AACA,UAAMI,OAAO,GAAGH,IAAI,CAACI,SAAL,CAAeD,OAA/B;AACA,UAAME,WAAW,GAAGL,IAAI,CAACI,SAAL,CAAeC,WAAnC;AACA,UAAMC,cAAc,GAAGN,IAAI,CAACI,SAAL,CAAeG,mBAAtC;AACA,UAAMC,QAAQ,GAAGR,IAAI,CAACQ,QAAtB;AACA,UAAMC,IAAI,GAAGT,IAAI,CAACI,SAAL,CAAeK,IAA5B;AACA,UAAMC,IAAI,GAAGV,IAAI,CAACI,SAAL,CAAeM,IAA5B;AACA,UAAMC,OAAO,GAAGX,IAAI,CAACY,KAAL,CAAWZ,IAAX,CAAgB,CAAhB,EAAmBa,WAAnC;AACA,UAAMC,MAAM,GAAGd,IAAI,CAACY,KAAL,CAAWZ,IAAX,CAAgB,CAAhB,EAAmBe,UAAlC;AACA,UAAMC,SAAS,GAAGhB,IAAI,CAACY,KAAL,CAAWZ,IAAX,CAAgB,CAAhB,EAAmBiB,SAArC;AACAlC,MAAAA,OAAO,CAAC;AACNoB,QAAAA,OAAO,EAAPA,OADM;AAENE,QAAAA,WAAW,EAAXA,WAFM;AAGNX,QAAAA,MAAM,EAANA,MAHM;AAINY,QAAAA,cAAc,EAAdA,cAJM;AAKNE,QAAAA,QAAQ,EAARA,QALM;AAMNC,QAAAA,IAAI,EAAJA,IANM;AAONC,QAAAA,IAAI,EAAJA,IAPM;AAQNC,QAAAA,OAAO,EAAPA,OARM;AASNG,QAAAA,MAAM,EAANA,MATM;AAUNE,QAAAA,SAAS,EAATA;AAVM,OAAD,CAAP;AAYD,KA1BD;AA2BD,GA5BM,CAAP;AA6BD;;AAAA;eAEc;AACbE,EAAAA,KAAK,EAAE;AACLC,IAAAA,QADK,oBACIC,MADJ,EACYC,IADZ,EACkBC,OADlB,EAC2B;AAC9B,aAAO9C,WAAW,CAAC+C,OAAO,CAACC,GAAR,CAAYC,MAAb,EAAqBJ,IAAI,CAAC3C,KAA1B,CAAlB;AACD;AAHI,GADM;AAMbgD,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OADQ,mBACAP,MADA,EACQC,IADR,EACcC,OADd,EACuB;AAC7B,aAAO1B,UAAU,CAAC2B,OAAO,CAACC,GAAR,CAAYI,OAAb,EAAsBR,MAAM,CAAC1B,MAA7B,CAAjB;AACD;AAHO;AANG,C","sourcesContent":["require('now-env');\n\nimport {\n  gql\n} from 'apollo-server-express';\n// Set the baseUrl and urlParams for Dark Sky API call\nimport NodeGeocoder from 'node-geocoder';\nimport request from 'request';\nconst baseUrl = 'https://api.darksky.net/forecast/';\nconst urlParams = '?units=us&exclude=minutely,hourly,flags';\nconst mapLinkBase = 'https://www.google.com/maps/?q=';\n// Geocode a place through node-geocoder and the Google Maps API\n// https://github.com/nchaulet/node-geocoder\nfunction getLocation(apiKey, place) {\n  const options = {\n    provider: 'google',\n    apiKey\n  };\n\n  const geocoder = NodeGeocoder(options);\n\n  return new Promise((resolve, reject) => {\n    geocoder.geocode(place, (err, res) => {\n      if (err) {\n        reject(err);\n      }\n      const city = res[0].city;\n      const country = res[0].country;\n      const lat = res[0].latitude;\n      const lng = res[0].longitude;\n      resolve({\n        city,\n        country,\n        coords: [lat, lng],\n        mapLink: `${mapLinkBase}${lat},${lng}`\n      });\n    });\n  });\n}\n\n// Pass the geographic coordinates of the location to the Dark Sky API to get current conditions\nfunction getWeather(apiKey, coords) {\n  return new Promise((resolve, reject) => {\n    request(`${baseUrl}${apiKey}/${coords[0]},${coords[1]}${urlParams}`, (error, response, body) => {\n      if (error) {\n        reject(error);\n      }\n      const data = JSON.parse(body);\n      const summary = data.currently.summary;\n      const temperature = data.currently.temperature;\n      const apttemperature = data.currently.apparentTemperature;\n      const timezone = data.timezone\n      const time = data.currently.time\n      const icon = data.currently.icon\n      const sunrise = data.daily.data[0].sunriseTime\n      const sunset = data.daily.data[0].sunsetTime\n      const moonphase = data.daily.data[0].moonPhase\n      resolve({\n        summary,\n        temperature,\n        coords,\n        apttemperature,\n        timezone,\n        time,\n        icon,\n        sunrise,\n        sunset,\n        moonphase,\n      });\n    });\n  });\n};\n\nexport default {\n  Query: {\n    location(parent, args, context) {\n      return getLocation(process.env.GOOGLE, args.place);\n    }\n  },\n  Location: {\n    weather(parent, args, context) {\n      return getWeather(process.env.DARKSKY, parent.coords);\n    }\n  }\n};"],"file":"index.js"}